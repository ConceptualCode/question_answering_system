# Author: Anthony Soronnadi

from transformers import GPT2Tokenizer, GPT2LMHeadModel, pipeline
from huggingface_hub.utils._errors import RepositoryNotFoundError

class GenerativeAI:
    def __init__(self):
        try:
            self.tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
            self.model = GPT2LMHeadModel.from_pretrained('gpt2')
            self.generator = pipeline('text-generation', model=self.model, tokenizer=self.tokenizer)
        except RepositoryNotFoundError:
            raise ValueError("The model gpt2 was not found. Please make sure the model identifier is correct.")
    
    def generate_answer(self, prompt):
        try:
            if not prompt.strip():
                raise ValueError("The prompt is empty or only contains whitespace.")
            
            print("Prompt Received by GenerativeAI: ", prompt)
    
            if self.tokenizer.pad_token is None:
                self.tokenizer.pad_token = self.tokenizer.eos_token

            inputs = self.tokenizer.encode_plus(
                prompt,
                return_tensors='pt',
                max_length=1024, 
                truncation=True,
                padding='max_length' 
            )

            input_ids = inputs['input_ids']
            attention_mask = inputs['attention_mask']

            outputs = self.model.generate(
                input_ids=input_ids,
                attention_mask=attention_mask,
                max_length=200,  
                num_return_sequences=1,
                no_repeat_ngram_size=2,
                early_stopping=True
            )

            if outputs.shape[1] > 0:
                response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
                print("Response Generated by GenerativeAI: ", response)
                return response
            else:
                print("Warning: Model did not generate any response.")
                return ""

        except Exception as e:
            print(f"Error in generating answer: {str(e)}")
            return ""

